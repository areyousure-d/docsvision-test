{"version":3,"sources":["features/redux/actions/actionTypes.ts","lib/addToTree.ts","lib/tree.ts","firebase.ts","api/places.ts","lib/filterInventories.ts","api/inventories.ts","features/redux/actions/placeActions.ts","ui/templates/two-columns.tsx","ui/templates/basic-template.tsx","ui/atoms/header.tsx","ui/atoms/footer.tsx","ui/atoms/list-button.tsx","ui/molecules/loading-spinner.tsx","ui/molecules/validation-alert.tsx","features/places/components/molecules/menu.tsx","lib/placeTree-helpers.ts","features/places/components/molecules/menu-item.tsx","features/places/components/molecules/empty-menu-item.tsx","features/places/components/atoms/inventory-list-item.tsx","features/places/components/molecules/inventory-list.tsx","features/places/components/molecules/add-modal.tsx","features/places/components/molecules/edit-modal.tsx","features/places/components/molecules/delete-modal.tsx","features/places/components/organisms/inventories.tsx","features/places/places.tsx","App.tsx","features/redux/reducers/placeReducer.ts","features/redux/reducers/index.ts","features/redux/store.ts","index.tsx"],"names":["SET_PLACES_TREE","SET_INVENTORIES","SET_PLACES_LOADING","SET_PLACES_LOADING_ERROR","SET_INVENTORIES_LOADING","SET_INVENTORIES_LOADING_ERROR","SET_CURRENT_PLACE_ID","SET_IS_CURRENT_PLACE_LAST","REFETCH","addToTree","tree","docs","doc","toNodeId","findBFS","id","add","name","currentId","parts","length","forEach","index","findIndex","currentDoc","Node","this","Tree","root","node","parent","push","_node","traverseBFS","cb","queue","shift","part","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getPlaces","a","db","firestore","collection","get","data","places","map","filterInventories","inventories","filter","inventory","undefined","count","placeId","getInventories","place","addInventory","set","response","deleteInventory","inventoryId","delete","editInventory","newInventory","update","setPlacesLoading","isLoading","type","payload","setPlacesLoadingError","isError","setInventoriesLoading","setInventoriesLoadingError","fetchPlaces","dispatch","then","i","setPlacesTree","catch","fetchInventories","setInventories","setCurrentPlaceId","setIsCurrentPlaceLast","isLast","refetch","TwoColumns","left","right","flex","minW","bg","BasicTemplate","margin","minH","maxW","flexDirection","justifyContent","Header","h","display","alignItems","pl","Footer","ListButton","onClick","children","as","height","lineHeight","transition","border","px","borderRadius","fontSize","fontWeight","borderColor","color","_hover","_active","transform","_focus","boxShadow","mr","LoadingSpinner","ValidationAlert","title","text","onClose","status","position","top","Menu","useSelector","state","placeReducer","placesTree","isPlacesLoading","isPlacesLoadingError","currentPlaceId","defaultIndex","allowMultiple","getMenuItems","findChildrenIds","ids","targetNode","target","MenuItem","useDispatch","useState","hasInventory","setHasInventory","useEffect","childrenIds","includes","isSelected","placeid","pr","cursor","textAlign","p","Check","EmptyMenuItem","mb","ml","InventoryListItem","onEditModalOpen","onDeleteModalOpen","isCurrentPlaceLast","flexWrap","style","InventoryList","currentPlaceChildrenIds","setCurrentPlaceChildrenIds","isInventoriesLoading","filteredInventories","AddModal","isOpen","toast","useToast","setName","nameRequiredError","setNameRequiredError","setCount","countRequiredError","setCountRequiredError","pb","placeholder","onChange","e","currentTarget","value","mt","Number","toString","colorScheme","description","duration","isClosable","EditModal","editModalId","editModalName","editModalCount","DeleteModal","deleteModalId","deleteModalName","Inventories","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalOpen","setEditModalId","setEditModalName","setEditModalCount","isDeleteModalOpen","setIsDeleteModalOpen","setDeleteModalId","setDeleteModalName","size","pt","Places","shouldRefetch","App","initialState","isInventoriesLoadingError","rootReducer","combineReducers","action","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15697153.chunk.js","sourcesContent":["export const SET_PLACES_TREE = \"SET_PLACES_TREE\";\nexport const SET_INVENTORIES = \"SET_INVENTORIES\";\nexport const SET_PLACES_LOADING = \"SET_PLACES_LOADING\";\nexport const SET_PLACES_LOADING_ERROR = \"SET_PLACES_LOADING_ERROR\";\nexport const SET_INVENTORIES_LOADING = \"SET_INVENTORIES_LOADING\";\nexport const SET_INVENTORIES_LOADING_ERROR = \"SET_PLACES_LOADING_ERROR\";\nexport const SET_CURRENT_PLACE_ID = \"SET_CURRENT_PLACE_ID\";\nexport const SET_IS_CURRENT_PLACE_LAST = \"SET_IS_CURRENT_PLACE_LAST\";\nexport const REFETCH = \"REFETCH\";\n","import { ITree } from \"./tree\";\n\nexport type PlaceType = {\n  id: string;\n  name: string;\n  parts: string[];\n};\n\nexport function addToTree(\n  tree: ITree,\n  docs: PlaceType[],\n  doc: PlaceType,\n  toNodeId?: string\n) {\n  if (tree.findBFS(doc.id)) {\n    //console.log(\"tree.findBFS(doc.id)\", tree.findBFS(doc.id));\n    return;\n  }\n  tree.add(doc.id, doc.name, toNodeId);\n\n  const currentId = doc.id;\n\n  if (doc.parts && doc.parts.length > 0) {\n    //console.log(\"doc.parts: \", doc.parts);\n    doc.parts.forEach((id: string) => {\n      const index = docs.findIndex((doc: PlaceType) => doc.id === id);\n      const currentDoc = docs[index];\n      //console.log(\"currentDoc: \", currentDoc);\n      //console.log(\"id:\", id);\n      //console.log(\"currentId: \", currentId);\n      addToTree(tree, docs, currentDoc, currentId);\n    });\n  }\n}\n","export type NodeType = {\n  id: string;\n  name: string;\n  parts: NodeType[];\n};\n\ninterface INode {\n  id: string;\n  name: string;\n  parts: NodeType[];\n}\n\nexport interface ITree {\n  root: NodeType;\n  add: (id: string, name: string, toNodeId?: string) => void;\n  findBFS: (id: string) => NodeType | null;\n  traverseBFS: (cb: any) => void;\n}\n\nclass Node implements INode {\n  id: string;\n  name: string;\n  parts: [];\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n    this.parts = [];\n  }\n}\n\nexport class Tree implements ITree {\n  root: NodeType;\n\n  constructor() {\n    this.root = { id: \"buildings\", name: \"Все здания\", parts: [] };\n  }\n\n  add(id: string, name: string, toNodeId?: string): void {\n    const node = new Node(id, name);\n\n    const parent = toNodeId\n      ? this.findBFS(toNodeId)\n      : this.findBFS(\"buildings\");\n\n    if (parent) {\n      parent.parts.push(node);\n    }\n  }\n\n  findBFS(id: string): NodeType | null {\n    const queue = [this.root];\n    let _node = null;\n\n    this.traverseBFS((node: NodeType): void => {\n      if (node.id === id) {\n        _node = node;\n      }\n    });\n\n    return _node;\n  }\n\n  traverseBFS(cb: (node: NodeType) => void): void {\n    const queue = [this.root];\n\n    if (cb)\n      while (queue.length) {\n        const node = queue[0];\n        queue.shift();\n\n        cb(node);\n\n        for (const part of node.parts) {\n          queue.push(part);\n        }\n      }\n  }\n}\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\n  authDomain: \"dv-inventory.firebaseapp.com\",\n  databaseURL: \"https://dv-inventory.firebaseio.com\",\n  projectId: \"dv-inventory\",\n  storageBucket: \"dv-inventory.appspot.com\",\n  messagingSenderId: \"130062240176\",\n  appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport { firebase };\n","import { firebase } from \"../firebase\";\n\nexport const getPlaces = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"places\").get();\n\n  const places = data.docs.map((doc) => ({\n    id: doc.id,\n    name: doc.data().name,\n    parts: doc.data().parts && doc.data().parts.map((part: any) => part.id),\n  }));\n  return places;\n};\n","import { InventoryType } from \"../features/redux/actions/placeActions\";\n\nexport function filterInventories(inventories: InventoryType[]) {\n  const filteredInventories = inventories.filter((inventory: InventoryType) => {\n    if (\n      inventory.id === undefined ||\n      inventory.name === undefined ||\n      inventory.count === undefined ||\n      inventory.placeId === undefined\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  return filteredInventories;\n}\n","import { firebase } from \"../firebase\";\nimport { filterInventories } from \"../lib/filterInventories\";\n\nexport const getInventories = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"inventory\").get();\n\n  const inventories = data.docs.map((doc) => ({\n    id: doc.id && doc.id,\n    name: doc.data && doc.data().name,\n    count: doc.data && doc.data().count,\n    placeId: doc.data && doc.data().place && doc.data().place.id,\n  }));\n\n  return filterInventories(inventories);\n};\n\nexport const addInventory = async (\n  name: string,\n  count: number,\n  placeId: string\n) => {\n  const db = firebase.firestore();\n  const response = await db\n    .collection(\"inventory\")\n    .doc()\n    .set({\n      name,\n      count,\n      place: db.collection(\"places\").doc(placeId),\n    });\n\n  return response;\n};\n\nexport const deleteInventory = async (inventoryId: string) => {\n  const db = firebase.firestore();\n  const response = await db.collection(\"inventory\").doc(inventoryId).delete();\n\n  return response;\n};\n\nexport const editInventory = async (\n  inventoryId: string,\n  newInventory: { name?: string; count?: number }\n) => {\n  const db = firebase.firestore();\n  const response = await db\n    .collection(\"inventory\")\n    .doc(inventoryId)\n    .update({ ...newInventory });\n\n  return response;\n};\n\n/*\nexport const getInventories2 = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"inventory\").get();\n\n  const inventories = data.docs.map((doc) => ({\n    id: doc.id && doc.id,\n    data: doc.data && doc.data(),\n    name: doc.data && doc.data().name,\n    count: doc.data && doc.data().count,\n    placeId: doc.data && doc.data().place && doc.data().place.id,\n  }));\n\n  return inventories;\n};\n*/\n","import {\n  SET_PLACES_TREE,\n  SET_INVENTORIES,\n  SET_PLACES_LOADING,\n  SET_PLACES_LOADING_ERROR,\n  SET_INVENTORIES_LOADING,\n  SET_INVENTORIES_LOADING_ERROR,\n  SET_CURRENT_PLACE_ID,\n  SET_IS_CURRENT_PLACE_LAST,\n  REFETCH,\n} from \"./actionTypes\";\nimport { PlaceType, addToTree } from \"../../../lib/addToTree\";\nimport { NodeType, Tree } from \"../../../lib/tree\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { RootStateType } from \"../reducers\";\nimport { Dispatch } from \"redux\";\nimport { getPlaces } from \"../../../api/places\";\nimport { getInventories } from \"../../../api/inventories\";\n\n// todo: need to refactoring\n\ntype PlacesTreeType = {\n  type: typeof SET_PLACES_TREE;\n  payload: NodeType;\n};\n\ntype PlacesLoadingType = {\n  type: typeof SET_PLACES_LOADING;\n  payload: boolean;\n};\n\ntype PlacesLoadingErrorType = {\n  type: typeof SET_PLACES_LOADING_ERROR;\n  payload: boolean;\n};\n\nexport type InventoryType = {\n  id: string;\n  name: string;\n  count: number;\n  placeId: string;\n};\n\ntype SetInventoriesType = {\n  type: typeof SET_INVENTORIES;\n  payload: InventoryType[];\n};\n\ntype InventoriesLoadingType = {\n  type: typeof SET_INVENTORIES_LOADING;\n  payload: boolean;\n};\n\ntype InventoriesLoadingErrorType = {\n  type: typeof SET_INVENTORIES_LOADING_ERROR;\n  payload: boolean;\n};\n\ntype InventoriesType =\n  | SetInventoriesType\n  | InventoriesLoadingType\n  | InventoriesLoadingErrorType;\n\ntype PlacesType = PlacesTreeType | PlacesLoadingType | PlacesLoadingErrorType;\n\nexport const setPlacesTree = (places: PlaceType[]): PlacesTreeType => {\n  const tree = new Tree();\n\n  for (let i = 0; i < places.length; i++) {\n    addToTree(tree, places, places[i]);\n  }\n\n  return {\n    type: SET_PLACES_TREE,\n    payload: tree.root,\n  };\n};\n\nexport const setPlacesLoading = (isLoading: boolean): PlacesLoadingType => ({\n  type: SET_PLACES_LOADING,\n  payload: isLoading,\n});\n\nexport const setPlacesLoadingError = (\n  isError: boolean\n): PlacesLoadingErrorType => ({\n  type: SET_PLACES_LOADING_ERROR,\n  payload: isError,\n});\n\nexport const setInventories = (\n  inventories: InventoryType[]\n): SetInventoriesType => ({\n  type: SET_INVENTORIES,\n  payload: inventories,\n});\n\nexport const setInventoriesLoading = (\n  isLoading: boolean\n): InventoriesLoadingType => ({\n  type: SET_INVENTORIES_LOADING,\n  payload: isLoading,\n});\n\nexport const setInventoriesLoadingError = (\n  isError: boolean\n): InventoriesLoadingErrorType => ({\n  type: SET_PLACES_LOADING_ERROR,\n  payload: isError,\n});\n\nexport const fetchPlaces = (): ThunkAction<\n  void,\n  RootStateType,\n  unknown,\n  PlacesType\n> => (dispatch: Dispatch<PlacesType>) => {\n  dispatch(setPlacesLoading(true));\n  dispatch(setPlacesLoadingError(false));\n  getPlaces()\n    .then((places) => {\n      dispatch(setPlacesTree(places));\n      dispatch(setPlacesLoading(false));\n    })\n    .catch(() => dispatch(setPlacesLoadingError(true)));\n};\n\nexport const fetchInventories = (): ThunkAction<\n  void,\n  RootStateType,\n  unknown,\n  InventoriesType\n> => (dispatch: Dispatch<InventoriesType>) => {\n  dispatch(setInventoriesLoading(true));\n  dispatch(setInventoriesLoadingError(false));\n  getInventories()\n    .then((inventories) => {\n      dispatch(setInventories(inventories));\n      dispatch(setInventoriesLoading(false));\n    })\n    .catch(() => dispatch(setInventoriesLoadingError(true)));\n};\n\ntype CurrentPlaceIdType = {\n  type: typeof SET_CURRENT_PLACE_ID;\n  payload: string;\n};\n\nexport const setCurrentPlaceId = (id: string): CurrentPlaceIdType => ({\n  type: SET_CURRENT_PLACE_ID,\n  payload: id,\n});\n\ntype SetIsCurrentPlaceLastType = {\n  type: typeof SET_IS_CURRENT_PLACE_LAST;\n  payload: boolean;\n};\n\nexport const setIsCurrentPlaceLast = (\n  isLast: boolean\n): SetIsCurrentPlaceLastType => ({\n  type: SET_IS_CURRENT_PLACE_LAST,\n  payload: isLast,\n});\n\ntype RefetchType = {\n  type: typeof REFETCH;\n};\n\nexport const refetch = (): RefetchType => ({\n  type: REFETCH,\n});\n","import { ComponentType, FC } from \"react\";\n\nimport { Flex, Box } from \"@chakra-ui/react\";\n\ntype Props = {\n  left: ComponentType | JSX.Element;\n  right: ComponentType | JSX.Element;\n};\n\nexport const TwoColumns: FC<Props> = ({ left, right }) => {\n  return (\n    <Flex flex=\"auto\">\n      <Box flex=\"30%\" minW=\"300px\" bg=\"green.50\">\n        {left}\n      </Box>\n      <Box flex=\"70%\" bg=\"blue.50\">\n        {right}\n      </Box>\n    </Flex>\n  );\n};\n","import React, { ComponentType, FC } from \"react\";\n\nimport { Flex } from \"@chakra-ui/react\";\n\nimport { TwoColumns, Header, Footer } from \"../\";\n\ntype Props = {\n  left: ComponentType | JSX.Element;\n  right: ComponentType | JSX.Element;\n};\n\nexport const BasicTemplate: FC<Props> = ({ left, right }) => {\n  return (\n    <Flex\n      margin=\"0 auto\"\n      minH=\"100vh\"\n      maxW=\"1400px\"\n      minW=\"720px\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n    >\n      <Header />\n      <TwoColumns left={left} right={right} />\n      <Footer />\n    </Flex>\n  );\n};\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\nexport const Header: FC = () => (\n  <Box h=\"50px\" bg=\"gray.200\" display=\"flex\" alignItems=\"center\" pl=\"20px\">\n    Header\n  </Box>\n);\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\nexport const Footer: FC = () => (\n  <Box h=\"50px\" bg=\"gray.200\" display=\"flex\" alignItems=\"center\" pl=\"20px\">\n    Footer\n  </Box>\n);\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\ntype Props = {\n  onClick?: () => void;\n  children: string;\n};\n\nexport const ListButton: FC<Props> = ({ onClick, children }) => {\n  return (\n    <Box\n      onClick={onClick}\n      as=\"button\"\n      height=\"24px\"\n      lineHeight=\"1.2\"\n      transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n      border=\"1px\"\n      px=\"8px\"\n      borderRadius=\"2px\"\n      fontSize=\"14px\"\n      fontWeight=\"semibold\"\n      bg=\"#f5f6f7\"\n      borderColor=\"#ccd0d5\"\n      color=\"#4b4f56\"\n      _hover={{ bg: \"#ebedf0\" }}\n      _active={{\n        bg: \"#dddfe2\",\n        transform: \"scale(0.98)\",\n        borderColor: \"#bec3c9\",\n      }}\n      _focus={{\n        boxShadow:\n          \"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\",\n      }}\n      mr=\"5px\"\n    >\n      {children}\n    </Box>\n  );\n};\n","import React, { FC } from \"react\";\n\nimport { Flex, Spinner } from \"@chakra-ui/react\";\n\nexport const LoadingSpinner: FC = () => (\n  <Flex h=\"200px\" alignItems=\"center\" justifyContent=\"center\">\n    <Spinner />\n  </Flex>\n);\n","import React, { FC } from \"react\";\n\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  CloseButton,\n} from \"@chakra-ui/react\";\n\ntype Props = {\n  title?: string;\n  text?: string;\n  onClose?: () => void;\n};\n\nexport const ValidationAlert: FC<Props> = ({ title, text, onClose }) => {\n  return (\n    <Alert status=\"error\">\n      <AlertIcon />\n      <AlertTitle mr={2}>{title}</AlertTitle>\n      <AlertDescription>{text}</AlertDescription>\n      <CloseButton\n        position=\"absolute\"\n        right=\"8px\"\n        top=\"8px\"\n        onClick={onClose}\n      />\n    </Alert>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Accordion } from \"@chakra-ui/react\";\n\nimport { RootStateType } from \"../../../redux/reducers\";\n\nimport { LoadingSpinner } from \"../../../../ui\";\nimport { NodeType } from \"../../../../lib/tree\";\nimport { MenuItem, EmptyMenuItem } from \"./\";\n\nexport const Menu: FC = () => {\n  const {\n    placesTree,\n    isPlacesLoading,\n    isPlacesLoadingError,\n    currentPlaceId,\n  } = useSelector((state: RootStateType) => state.placeReducer);\n\n  if (isPlacesLoading) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <Accordion defaultIndex={[0]} allowMultiple>\n      {placesTree && getMenuItems(placesTree)}\n    </Accordion>\n  );\n};\n\nfunction getMenuItems(node: NodeType): JSX.Element {\n  const item =\n    node.parts.length > 0 ? (\n      node.id === \"buildings\" ? (\n        <>{node.parts.map((part: NodeType) => getMenuItems(part))}</>\n      ) : (\n        <MenuItem key={node.id} placeId={node.id} title={node.name}>\n          {node.parts.map((part: NodeType) => getMenuItems(part))}\n        </MenuItem>\n      )\n    ) : (\n      <EmptyMenuItem key={node.id} id={node.id} name={node.name} />\n    );\n  return item;\n}\n","import { NodeType } from \"./tree\";\n\nexport function findChildrenIds(currentId: string, root: NodeType): string[] {\n  // const isParent = false;\n  const ids: string[] = [];\n\n  const targetNode = findBFS(currentId, root);\n\n  traverseBFS(targetNode, (node) => {\n    ids.push(node.id);\n  });\n\n  return ids;\n}\n\nexport function findBFS(id: string, root: NodeType): NodeType | null {\n  let _node = null;\n\n  traverseBFS(root, (node: NodeType): void => {\n    if (node.id === id) {\n      _node = node;\n    }\n  });\n\n  return _node;\n}\n\nexport function traverseBFS(\n  target: NodeType | null,\n  cb: (node: NodeType) => void\n): void {\n  if (target === null) return;\n\n  const queue = [target];\n\n  if (cb)\n    while (queue.length) {\n      const node = queue[0];\n      queue.shift();\n\n      cb(node);\n\n      for (const part of node.parts) {\n        queue.push(part);\n      }\n    }\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  setCurrentPlaceId,\n  setIsCurrentPlaceLast,\n} from \"../../../redux/actions\";\n\nimport {\n  AccordionButton,\n  AccordionItem,\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n} from \"@chakra-ui/react\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\n\nimport { RootStateType } from \"../../../redux/reducers\";\nimport { InventoryType } from \"../../../redux/actions/placeActions\";\n\nimport { findChildrenIds } from \"../../../../lib/placeTree-helpers\";\n\ntype Props = {\n  placeId: string;\n  title: string | null;\n  children: string | JSX.Element | JSX.Element[];\n};\n\nexport const MenuItem: FC<Props> = ({ placeId, title, children }) => {\n  const dispatch = useDispatch();\n\n  const [hasInventory, setHasInventory] = useState<boolean>(false);\n\n  const { currentPlaceId, inventories, placesTree } = useSelector(\n    (state: RootStateType) => state.placeReducer\n  );\n\n  useEffect(() => {\n    const childrenIds = findChildrenIds(placeId, placesTree);\n\n    let hasInventory = false;\n    inventories.forEach((inventory: InventoryType) => {\n      if (childrenIds.includes(inventory.placeId)) {\n        hasInventory = true;\n      }\n    });\n\n    setHasInventory(hasInventory);\n  }, [inventories, placeId, placesTree]);\n\n  const isSelected = placeId === currentPlaceId;\n\n  const onClick = () => {\n    dispatch(setCurrentPlaceId(placeId));\n    dispatch(setIsCurrentPlaceLast(false));\n  };\n\n  return (\n    <AccordionItem placeid={placeId} pr=\"0\">\n      {title && (\n        <h2>\n          <AccordionButton\n            onClick={onClick}\n            bg={isSelected ? \"green.300\" : undefined}\n            transition=\"background .2s\"\n            _hover={{\n              cursor: \"pointer\",\n              bg: isSelected ? \"green.300\" : \"rgba(200, 200, 200, .5)\",\n              transition: \"background .2s\",\n            }}\n          >\n            <Box flex=\"1\" textAlign=\"left\" p=\"0\" pl=\"5px\">\n              {title} {hasInventory && <CheckIcon color=\"green.800\" />}\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n        </h2>\n      )}\n      <AccordionPanel pr=\"0\">{children}</AccordionPanel>\n    </AccordionItem>\n  );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  setCurrentPlaceId,\n  setIsCurrentPlaceLast,\n} from \"../../../redux/actions\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\n\nimport { Box } from \"@chakra-ui/react\";\nimport { RootStateType } from \"../../../redux/reducers\";\nimport { InventoryType } from \"../../../redux/actions/placeActions\";\n\ntype Props = {\n  id: string;\n  name: string;\n};\n\nexport const EmptyMenuItem: FC<Props> = ({ id, name }) => {\n  const dispatch = useDispatch();\n\n  const [hasInventory, setHasInventory] = useState<boolean>(false);\n\n  const currentPlaceId = useSelector(\n    (state: RootStateType) => state.placeReducer.currentPlaceId\n  );\n\n  const inventories = useSelector(\n    (state: RootStateType) => state.placeReducer.inventories\n  );\n\n  useEffect(() => {\n    let hasInventory = false;\n    inventories.forEach((inventory: InventoryType) => {\n      if (inventory.placeId === id) {\n        hasInventory = true;\n      }\n    });\n\n    setHasInventory(hasInventory);\n  }, [inventories, id]);\n\n  const onClick = () => {\n    dispatch(setCurrentPlaceId(id));\n    dispatch(setIsCurrentPlaceLast(true));\n  };\n\n  const isSelected = id === currentPlaceId;\n\n  return (\n    <Box\n      bg={isSelected ? \"green.300\" : undefined}\n      onClick={onClick}\n      flex=\"1\"\n      mb=\"10px\"\n      ml=\"10px\"\n      textAlign=\"left\"\n      p=\"5px\"\n      pl=\"10px\"\n      transition=\"background .2s\"\n      _hover={{\n        cursor: \"pointer\",\n        bg: isSelected ? \"green.300\" : \"rgba(200, 200, 200, .5)\",\n        transition: \"background .2s\",\n      }}\n    >\n      {name} {hasInventory && <CheckIcon color=\"green.800\" />}\n    </Box>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { ListItem, Box } from \"@chakra-ui/react\";\nimport { ListButton } from \"../../../../ui\";\nimport { RootStateType } from \"../../../redux/reducers\";\n\ntype Props = {\n  id: string;\n  name: string;\n  count: number;\n  onEditModalOpen: (id: string, name: string, count: number) => void;\n  onDeleteModalOpen: (id: string, name: string) => void;\n};\n\nexport const InventoryListItem: FC<Props> = ({\n  id,\n  name,\n  count,\n  onEditModalOpen,\n  onDeleteModalOpen,\n}) => {\n  const isCurrentPlaceLast = useSelector(\n    (state: RootStateType) => state.placeReducer.isCurrentPlaceLast\n  );\n\n  return (\n    <ListItem\n      bg=\"blue.200\"\n      p={2}\n      display=\"flex\"\n      minW=\"400px\"\n      maxW=\"1024px\"\n      justifyContent=\"space-between\"\n      mb=\"10px\"\n      flexWrap=\"wrap\"\n    >\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        minW=\"400px\"\n        flexWrap=\"wrap\"\n        pr=\"10px\"\n      >\n        <span>\n          Наименование: <span style={{ fontWeight: \"bold\" }}> {name}</span>{\" \"}\n        </span>\n        <span>\n          Количество: <span style={{ fontWeight: \"bold\" }}> {count}</span>\n        </span>\n      </Box>\n      {isCurrentPlaceLast ? (\n        <Box display=\"flex\" flexWrap=\"nowrap\">\n          <ListButton onClick={() => onEditModalOpen(id, name, count)}>\n            Редактировать\n          </ListButton>\n          <ListButton onClick={() => onDeleteModalOpen(id, name)}>\n            Удалить\n          </ListButton>\n        </Box>\n      ) : null}\n    </ListItem>\n  );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { List } from \"@chakra-ui/react\";\n\nimport { InventoryListItem } from \"../atoms\";\nimport { LoadingSpinner } from \"../../../../ui\";\nimport { RootStateType } from \"../../../redux/reducers\";\nimport { InventoryType } from \"../../../redux/actions/placeActions\";\nimport { NodeType } from \"../../../../lib/tree\";\nimport { findChildrenIds } from \"../../../../lib/placeTree-helpers\";\n\ntype Props = {\n  onEditModalOpen: (id: string, name: string, count: number) => void;\n  onDeleteModalOpen: (id: string, name: string) => void;\n};\n\nexport const InventoryList: FC<Props> = ({\n  onEditModalOpen,\n  onDeleteModalOpen,\n}) => {\n  const [currentPlaceChildrenIds, setCurrentPlaceChildrenIds] = useState<\n    string[]\n  >([]);\n\n  const {\n    inventories,\n    currentPlaceId,\n    placesTree,\n    isInventoriesLoading,\n  } = useSelector((state: RootStateType) => state.placeReducer);\n\n  useEffect(() => {\n    const ids = findChildrenIds(currentPlaceId, placesTree);\n    setCurrentPlaceChildrenIds(ids);\n  }, [currentPlaceId, placesTree]);\n\n  const filteredInventories = inventories.filter((inventory: InventoryType) => {\n    if (currentPlaceId === \"buildings\") return true;\n    return currentPlaceChildrenIds.includes(inventory.placeId);\n  });\n\n  if (isInventoriesLoading) return <LoadingSpinner />;\n\n  return (\n    <List>\n      {filteredInventories.map((inventory: InventoryType) => (\n        <InventoryListItem\n          key={inventory.id}\n          id={inventory.id}\n          name={inventory.name}\n          count={inventory.count}\n          onEditModalOpen={onEditModalOpen}\n          onDeleteModalOpen={onDeleteModalOpen}\n        />\n      ))}\n    </List>\n  );\n};\n","import React, { FC, FormEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  useToast,\n} from \"@chakra-ui/react\";\n\nimport { addInventory } from \"../../../../api/inventories\";\nimport { refetch } from \"../../../redux/actions\";\n\nimport { ValidationAlert } from \"../../../../ui\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  currentPlaceId: string;\n};\n\nexport const AddModal: FC<Props> = ({ isOpen, onClose, currentPlaceId }) => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const [name, setName] = useState<string>(\"\");\n  const [nameRequiredError, setNameRequiredError] = useState<boolean>(false);\n  const [count, setCount] = useState<number>(0);\n  const [countRequiredError, setCountRequiredError] = useState<boolean>(false);\n\n  const onNameChange = (e: FormEvent<HTMLInputElement>) => {\n    setName(e.currentTarget.value);\n    setNameRequiredError(false);\n  };\n\n  const onCountChange = (e: FormEvent<HTMLInputElement>) => {\n    setCount(Number(e.currentTarget.value));\n    setCountRequiredError(false);\n  };\n\n  const onSave = () => {\n    if (name === \"\") {\n      setNameRequiredError(true);\n    }\n    if (count === 0) {\n      setCountRequiredError(true);\n    }\n    if (name === \"\" || count === 0) {\n      return;\n    }\n\n    addInventory(name, count, currentPlaceId)\n      .then(() => {\n        setCount(0);\n        setName(\"\");\n        dispatch(refetch());\n        onClose();\n        toast({\n          title: \"Добавление.\",\n          description: \"Оборудование успешно добавлено.\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      })\n      .catch(() => {\n        onClose();\n        toast({\n          title: \"Добавление.\",\n          description: \"Не удалось добавить оборудование.\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Добавить оборудование</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel>Название</FormLabel>\n            <Input\n              placeholder=\"Название\"\n              onChange={onNameChange}\n              value={name}\n            />\n            {nameRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести название!\"\n                onClose={() => setNameRequiredError(false)}\n              />\n            )}\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel>Количество</FormLabel>\n            <Input\n              type=\"number\"\n              placeholder=\"Количество\"\n              onChange={onCountChange}\n              value={count.toString()}\n            />\n            {countRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести количество!\"\n                onClose={() => setCountRequiredError(false)}\n              />\n            )}\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"blue\" mr={3} onClick={onSave}>\n            Добавить\n          </Button>\n          <Button onClick={onClose}>Отмена</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { FC, FormEvent, useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  useToast,\n} from \"@chakra-ui/react\";\n\nimport { editInventory } from \"../../../../api/inventories\";\nimport { refetch } from \"../../../redux/actions\";\n\nimport { ValidationAlert } from \"../../../../ui\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  editModalId: string;\n  editModalName: string;\n  editModalCount: number;\n};\n\nexport const EditModal: FC<Props> = ({\n  isOpen,\n  onClose,\n  editModalId,\n  editModalName,\n  editModalCount,\n}) => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const [name, setName] = useState<string>(editModalName);\n  const [nameRequiredError, setNameRequiredError] = useState<boolean>(false);\n  const [count, setCount] = useState<number>(editModalCount);\n  const [countRequiredError, setCountRequiredError] = useState<boolean>(false);\n\n  useEffect(() => {\n    setName(editModalName);\n    setCount(editModalCount);\n  }, [editModalName, editModalCount]);\n\n  const onNameChange = (e: FormEvent<HTMLInputElement>) => {\n    setName(e.currentTarget.value);\n    setNameRequiredError(false);\n  };\n\n  const onCountChange = (e: FormEvent<HTMLInputElement>) => {\n    setCount(Number(e.currentTarget.value));\n    setCountRequiredError(false);\n  };\n\n  const onSave = () => {\n    if (name === \"\") {\n      setNameRequiredError(true);\n    }\n    if (count === 0) {\n      setCountRequiredError(true);\n    }\n    if (name === \"\" || count === 0) {\n      return;\n    }\n\n    const newInventory = {\n      name,\n      count,\n    };\n\n    editInventory(editModalId, newInventory)\n      .then(() => {\n        dispatch(refetch());\n        onClose();\n        toast({\n          title: \"Редактирование.\",\n          description: \"Оборудование успешно отредактировано.\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      })\n      .catch(() => {\n        onClose();\n        toast({\n          title: \"Редактирование.\",\n          description: \"Не удалось отредактировать оборудование.\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Изменить оборудование</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel>Название</FormLabel>\n            <Input\n              placeholder=\"Название\"\n              onChange={onNameChange}\n              value={name}\n            />\n            {nameRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести название!\"\n                onClose={() => setNameRequiredError(false)}\n              />\n            )}\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel>Количество</FormLabel>\n            <Input\n              type=\"number\"\n              placeholder=\"Количество\"\n              onChange={onCountChange}\n              value={count.toString()}\n            />\n            {countRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести количество!\"\n                onClose={() => setCountRequiredError(false)}\n              />\n            )}\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"blue\" mr={3} onClick={onSave}>\n            Изменить\n          </Button>\n          <Button onClick={onClose}>Отмена</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\n\nimport { deleteInventory } from \"../../../../api/inventories\";\nimport { refetch } from \"../../../redux/actions\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  deleteModalId: string;\n  deleteModalName: string;\n};\n\nexport const DeleteModal: FC<Props> = ({\n  isOpen,\n  onClose,\n  deleteModalId,\n  deleteModalName,\n}) => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const onDelete = () => {\n    deleteInventory(deleteModalId)\n      .then(() => {\n        dispatch(refetch());\n        onClose();\n        toast({\n          title: \"Удаление.\",\n          description: \"Оборудование успешно удалено.\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      })\n      .catch(() => {\n        onClose();\n        toast({\n          title: \"Удаление.\",\n          description: \"Не удалось удалить оборудование.\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Удаление оборудования</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Text>Вы уверены, что хотите удалить {deleteModalName}?</Text>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n            Отмена\n          </Button>\n          <Button colorScheme=\"red\" onClick={onDelete}>\n            Удалить\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { FC, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Box, Heading, Flex, Button } from \"@chakra-ui/react\";\n\nimport { InventoryList, AddModal, EditModal, DeleteModal } from \"../\";\nimport { RootStateType } from \"../../../redux/reducers\";\n\nexport const Inventories: FC = () => {\n  const { isCurrentPlaceLast, currentPlaceId } = useSelector(\n    (state: RootStateType) => state.placeReducer\n  );\n\n  const [isAddModalOpen, setIsAddModalOpen] = useState<boolean>(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState<boolean>(false);\n  const [editModalId, setEditModalId] = useState<string>(\"\");\n  const [editModalName, setEditModalName] = useState<string>(\"\");\n  const [editModalCount, setEditModalCount] = useState<number>(0);\n\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [deleteModalId, setDeleteModalId] = useState<string>(\"\");\n  const [deleteModalName, setDeleteModalName] = useState<string>(\"\");\n\n  const onEditModalOpen = (id: string, name: string, count: number) => {\n    setEditModalId(id);\n    setEditModalName(name);\n    setEditModalCount(count);\n    setIsEditModalOpen(true);\n  };\n\n  const onDeleteModalOpen = (id: string, name: string) => {\n    setDeleteModalId(id);\n    setDeleteModalName(name);\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <Box p={2}>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" flexWrap=\"wrap\">\n        <Heading size=\"md\" textAlign=\"center\">\n          Имеющееся оборудование\n        </Heading>\n        {isCurrentPlaceLast && (\n          <Button onClick={() => setIsAddModalOpen(true)} bg=\"green.300\">\n            Добавить оборудование\n          </Button>\n        )}\n      </Flex>\n      <Box pt={4}>\n        <InventoryList\n          onEditModalOpen={onEditModalOpen}\n          onDeleteModalOpen={onDeleteModalOpen}\n        />\n      </Box>\n\n      <AddModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        currentPlaceId={currentPlaceId}\n      />\n      <EditModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        editModalId={editModalId}\n        editModalName={editModalName}\n        editModalCount={editModalCount}\n      />\n\n      <DeleteModal\n        isOpen={isDeleteModalOpen}\n        onClose={() => setIsDeleteModalOpen(false)}\n        deleteModalId={deleteModalId}\n        deleteModalName={deleteModalName}\n      />\n    </Box>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { fetchPlaces, fetchInventories } from \"../redux/actions\";\n\nimport { BasicTemplate } from \"../../ui\";\nimport { Menu, Inventories } from \"./components\";\nimport { RootStateType } from \"../redux/reducers\";\n\nexport const Places: FC = () => {\n  const dispatch = useDispatch();\n  const shouldRefetch = useSelector(\n    (state: RootStateType) => state.placeReducer.shouldRefetch\n  );\n\n  useEffect(() => {\n    dispatch(fetchPlaces());\n    dispatch(fetchInventories());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchInventories());\n  }, [shouldRefetch, dispatch]);\n\n  return <BasicTemplate left={<Menu />} right={<Inventories />} />;\n};\n","import React from \"react\";\n\nimport { Places } from \"./features/places\";\n\nfunction App() {\n  return <Places />;\n}\n\nexport default App;\n","import { NodeType } from \"../../../lib/tree\";\nimport {\n  SET_PLACES_TREE,\n  SET_INVENTORIES,\n  SET_PLACES_LOADING,\n  SET_PLACES_LOADING_ERROR,\n  SET_INVENTORIES_LOADING,\n  SET_INVENTORIES_LOADING_ERROR,\n  SET_CURRENT_PLACE_ID,\n  SET_IS_CURRENT_PLACE_LAST,\n  REFETCH,\n} from \"../actions/actionTypes\";\nimport { InventoryType } from \"../actions/placeActions\";\n\ntype PlaceReducerType = {\n  isCurrentPlaceLast: boolean;\n  currentPlaceId: string;\n  placesTree: NodeType | null;\n  isPlacesLoading: boolean;\n  isPlacesLoadingError: boolean;\n  inventories: InventoryType[];\n  isInventoriesLoading: boolean;\n  isInventoriesLoadingError: boolean;\n  shouldRefetch: boolean;\n};\n\nconst initialState: PlaceReducerType = {\n  isCurrentPlaceLast: false,\n  currentPlaceId: \"\",\n  placesTree: { id: \"buildings\", name: \"Все здания\", parts: [] },\n  isPlacesLoading: false,\n  isPlacesLoadingError: false,\n  inventories: [],\n  isInventoriesLoading: false,\n  isInventoriesLoadingError: false,\n  shouldRefetch: false,\n};\n\nexport const placeReducer = (\n  state = initialState,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case SET_PLACES_TREE:\n      return { ...state, placesTree: action.payload };\n    case SET_PLACES_LOADING:\n      return { ...state, isPlacesLoading: action.payload };\n    case SET_PLACES_LOADING_ERROR:\n      return { ...state, isPlacesLoadingError: action.payload };\n    case SET_INVENTORIES:\n      return { ...state, inventories: action.payload };\n    case SET_INVENTORIES_LOADING:\n      return { ...state, isInventoriesLoading: action.payload };\n    case SET_INVENTORIES_LOADING_ERROR:\n      return { ...state, isInventoriesLoadingError: action.payload };\n    case SET_CURRENT_PLACE_ID:\n      return { ...state, currentPlaceId: action.payload };\n    case SET_IS_CURRENT_PLACE_LAST:\n      return { ...state, isCurrentPlaceLast: action.payload };\n    case REFETCH:\n      return { ...state, shouldRefetch: !state.shouldRefetch };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport { placeReducer } from \"./placeReducer\";\n\nexport const rootReducer = combineReducers({\n  placeReducer,\n});\n\nexport type RootStateType = ReturnType<typeof rootReducer>;\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, compose(applyMiddleware(thunk)));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\n\nimport { store } from \"./features/redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}