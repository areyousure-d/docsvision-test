{"version":3,"sources":["ui/templates/two-columns.tsx","ui/templates/basic-template.tsx","ui/atoms/header.tsx","ui/atoms/footer.tsx","ui/atoms/list-button.tsx","ui/molecules/loading-spinner.tsx","ui/molecules/validation-alert.tsx","firebase.ts","api/places.ts","lib/filterInventories.ts","api/inventories.ts","features/places/model/index.ts","features/places/components/molecules/menu.tsx","lib/placeTree-helpers.ts","features/places/components/molecules/menu-item.tsx","features/places/components/molecules/empty-menu-item.tsx","features/places/components/atoms/inventory-list-item.tsx","features/places/components/molecules/inventory-list.tsx","features/places/components/molecules/add-modal.tsx","features/places/components/molecules/edit-modal.tsx","features/places/components/molecules/delete-modal.tsx","features/places/components/organisms/inventories.tsx","lib/tree.ts","lib/addToTree.ts","features/places/model/init.ts","features/places/places.tsx","App.tsx","index.tsx"],"names":["TwoColumns","left","right","flex","minW","bg","BasicTemplate","margin","minH","maxW","flexDirection","justifyContent","Header","h","display","alignItems","pl","Footer","ListButton","onClick","children","as","height","lineHeight","transition","border","px","borderRadius","fontSize","fontWeight","borderColor","color","_hover","_active","transform","_focus","boxShadow","mr","LoadingSpinner","ValidationAlert","title","text","onClose","status","position","top","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getPlaces","a","db","firestore","collection","get","data","places","docs","map","doc","id","name","parts","part","filterInventories","inventories","filter","inventory","undefined","count","placeId","getInventories","place","addInventory","set","response","deleteInventory","inventoryId","delete","editInventory","newInventory","update","$places","createStore","isCurrentPlaceLast","currentPlaceId","placesTree","fetchPlacesFx","createEffect","fetchInventoriesFx","addInventoryFx","deleteInventoryFx","editInventoryFx","setCurrentPlaceId","createEvent","setIsCurrentPlaceLast","Menu","useStore","isPlacesLoading","pending","useEffect","defaultIndex","allowMultiple","getMenuItems","node","length","findChildrenIds","currentId","root","ids","targetNode","_node","traverseBFS","findBFS","push","target","cb","queue","shift","MenuItem","useState","hasInventory","setHasInventory","isSelected","setIsSelected","childrenIds","forEach","includes","placeid","pr","cursor","textAlign","p","Check","EmptyMenuItem","mb","ml","InventoryListItem","onEditModalOpen","onDeleteModalOpen","flexWrap","style","InventoryList","currentPlaceChildrenIds","setCurrentPlaceChildrenIds","filteredInventories","AddModal","isOpen","toast","useToast","setName","nameRequiredError","setNameRequiredError","setCount","countRequiredError","setCountRequiredError","negativeCountError","setNegativeCountError","tooBigCountError","setTooBigCountError","pb","placeholder","onChange","e","currentTarget","value","mt","type","Number","toString","colorScheme","unwatchDone","done","watch","console","log","description","duration","isClosable","unwatchFail","fail","isLoading","loadingText","EditModal","editModalId","editModalName","editModalCount","DeleteModal","deleteModalId","deleteModalName","Inventories","isAddModalOpen","setIsAddModalOpen","isEditModalOpen","setIsEditModalOpen","setEditModalId","setEditModalName","setEditModalCount","isDeleteModalOpen","setIsDeleteModalOpen","setDeleteModalId","setDeleteModalName","size","pt","Node","this","Tree","toNodeId","parent","addToTree","tree","add","index","findIndex","currentDoc","on","doneData","state","i","isLast","forward","from","to","Places","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.731b0a58.chunk.js","sourcesContent":["import { ComponentType, FC } from \"react\";\n\nimport { Flex, Box } from \"@chakra-ui/react\";\n\ntype Props = {\n  left: ComponentType | JSX.Element;\n  right: ComponentType | JSX.Element;\n};\n\nexport const TwoColumns: FC<Props> = ({ left, right }) => {\n  return (\n    <Flex flex=\"auto\">\n      <Box flex=\"30%\" minW=\"300px\" bg=\"green.50\">\n        {left}\n      </Box>\n      <Box flex=\"70%\" bg=\"blue.50\">\n        {right}\n      </Box>\n    </Flex>\n  );\n};\n","import React, { ComponentType, FC } from \"react\";\n\nimport { Flex } from \"@chakra-ui/react\";\n\nimport { TwoColumns, Header, Footer } from \"../\";\n\ntype Props = {\n  left: ComponentType | JSX.Element;\n  right: ComponentType | JSX.Element;\n};\n\nexport const BasicTemplate: FC<Props> = ({ left, right }) => {\n  return (\n    <Flex\n      margin=\"0 auto\"\n      minH=\"100vh\"\n      maxW=\"1400px\"\n      minW=\"720px\"\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n    >\n      <Header />\n      <TwoColumns left={left} right={right} />\n      <Footer />\n    </Flex>\n  );\n};\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\nexport const Header: FC = () => (\n  <Box h=\"50px\" bg=\"gray.200\" display=\"flex\" alignItems=\"center\" pl=\"20px\">\n    Header\n  </Box>\n);\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\nexport const Footer: FC = () => (\n  <Box h=\"50px\" bg=\"gray.200\" display=\"flex\" alignItems=\"center\" pl=\"20px\">\n    Footer\n  </Box>\n);\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\ntype Props = {\n  onClick?: () => void;\n  children: string;\n};\n\nexport const ListButton: FC<Props> = ({ onClick, children }) => {\n  return (\n    <Box\n      onClick={onClick}\n      as=\"button\"\n      height=\"24px\"\n      lineHeight=\"1.2\"\n      transition=\"all 0.2s cubic-bezier(.08,.52,.52,1)\"\n      border=\"1px\"\n      px=\"8px\"\n      borderRadius=\"2px\"\n      fontSize=\"14px\"\n      fontWeight=\"semibold\"\n      bg=\"#f5f6f7\"\n      borderColor=\"#ccd0d5\"\n      color=\"#4b4f56\"\n      _hover={{ bg: \"#ebedf0\" }}\n      _active={{\n        bg: \"#dddfe2\",\n        transform: \"scale(0.98)\",\n        borderColor: \"#bec3c9\",\n      }}\n      _focus={{\n        boxShadow:\n          \"0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)\",\n      }}\n      mr=\"5px\"\n    >\n      {children}\n    </Box>\n  );\n};\n","import React, { FC } from \"react\";\n\nimport { Flex, Spinner } from \"@chakra-ui/react\";\n\nexport const LoadingSpinner: FC = () => (\n  <Flex h=\"200px\" alignItems=\"center\" justifyContent=\"center\">\n    <Spinner />\n  </Flex>\n);\n","import React, { FC } from \"react\";\n\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  CloseButton,\n} from \"@chakra-ui/react\";\n\ntype Props = {\n  title?: string;\n  text?: string;\n  onClose?: () => void;\n};\n\nexport const ValidationAlert: FC<Props> = ({ title, text, onClose }) => {\n  return (\n    <Alert status=\"error\">\n      <AlertIcon />\n      <AlertTitle mr={2}>{title}</AlertTitle>\n      <AlertDescription>{text}</AlertDescription>\n      <CloseButton\n        position=\"absolute\"\n        right=\"8px\"\n        top=\"8px\"\n        onClick={onClose}\n      />\n    </Alert>\n  );\n};\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\n  authDomain: \"dv-inventory.firebaseapp.com\",\n  databaseURL: \"https://dv-inventory.firebaseio.com\",\n  projectId: \"dv-inventory\",\n  storageBucket: \"dv-inventory.appspot.com\",\n  messagingSenderId: \"130062240176\",\n  appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport { firebase };\n","import { firebase } from \"../firebase\";\n\nexport const getPlaces = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"places\").get();\n\n  const places = data.docs.map((doc) => ({\n    id: doc.id,\n    name: doc.data().name,\n    parts: doc.data().parts && doc.data().parts.map((part: any) => part.id),\n  }));\n\n  return places;\n};\n","import { Inventory } from \"../features/places/types\";\n\nexport function filterInventories(inventories: Inventory[]) {\n  const filteredInventories = inventories.filter((inventory: Inventory) => {\n    if (\n      inventory.id === undefined ||\n      inventory.name === undefined ||\n      inventory.count === undefined ||\n      inventory.placeId === undefined\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  return filteredInventories;\n}\n","import { firebase } from \"../firebase\";\nimport { filterInventories } from \"../lib/filterInventories\";\n\nexport const getInventories = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"inventory\").get();\n\n  const inventories = data.docs.map((doc) => ({\n    id: doc.id && doc.id,\n    name: doc.data && doc.data().name,\n    count: doc.data && doc.data().count,\n    placeId: doc.data && doc.data().place && doc.data().place.id,\n  }));\n\n  return filterInventories(inventories);\n};\n\nexport const addInventory = async (\n  name: string,\n  count: number,\n  placeId: string\n) => {\n  const db = firebase.firestore();\n  const response = await db\n    .collection(\"inventory\")\n    .doc()\n    .set({\n      name,\n      count,\n      place: db.collection(\"places\").doc(placeId),\n    });\n\n  return response;\n};\n\nexport const deleteInventory = async (inventoryId: string) => {\n  const db = firebase.firestore();\n  const response = await db.collection(\"inventory\").doc(inventoryId).delete();\n\n  return response;\n};\n\nexport const editInventory = async (\n  inventoryId: string,\n  newInventory: { name?: string; count?: number }\n) => {\n  const db = firebase.firestore();\n  const response = await db\n    .collection(\"inventory\")\n    .doc(inventoryId)\n    .update({ ...newInventory });\n\n  return response;\n};\n\n/*\nexport const getInventories2 = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"inventory\").get();\n\n  const inventories = data.docs.map((doc) => ({\n    id: doc.id && doc.id,\n    data: doc.data && doc.data(),\n    name: doc.data && doc.data().name,\n    count: doc.data && doc.data().count,\n    placeId: doc.data && doc.data().place && doc.data().place.id,\n  }));\n\n  return inventories;\n};\n*/\n","import { createEffect, createEvent, createStore } from \"effector\";\n\nimport { getPlaces } from \"../../../api/places\";\nimport {\n  getInventories,\n  addInventory,\n  deleteInventory,\n  editInventory,\n} from \"../../../api/inventories\";\n\nimport { PlacesStore } from \"../types\";\n\n//store\n// isCurrentPlaceLast - чтобы показать кнопки редактирования\nexport const $places = createStore<PlacesStore>({\n  isCurrentPlaceLast: false,\n  currentPlaceId: \"\",\n  placesTree: { id: \"buildings\", name: \"Все здания\", parts: [] },\n  inventories: [],\n});\n\n// EFFECTS\n// todo: handle errors\nexport const fetchPlacesFx = createEffect(async () => {\n  const places = await getPlaces();\n\n  return places;\n});\n\nexport const fetchInventoriesFx = createEffect(async () => {\n  const inventories = await getInventories();\n\n  return inventories;\n});\n\nexport const addInventoryFx = createEffect(\n  async ({\n    name,\n    count,\n    placeId,\n  }: {\n    name: string;\n    count: number;\n    placeId: string;\n  }) => {\n    await addInventory(name, count, placeId);\n  }\n);\n\nexport const deleteInventoryFx = createEffect(\n  async ({ inventoryId }: { inventoryId: string }) => {\n    await deleteInventory(inventoryId);\n  }\n);\n\nexport const editInventoryFx = createEffect(\n  async ({\n    inventoryId,\n    newInventory,\n  }: {\n    inventoryId: string;\n    newInventory: { name?: string; count?: number };\n  }) => {\n    await editInventory(inventoryId, newInventory);\n  }\n);\n\n// EVENTS\nexport const setCurrentPlaceId = createEvent<string>();\n\nexport const setIsCurrentPlaceLast = createEvent<boolean>();\n\nexport const setIsPlacesLoading = createEvent<boolean>();\n\nexport const setIsPlacesLoadingError = createEvent<boolean>();\n\nexport const setIsInventoriesLoading = createEvent<boolean>();\n\nexport const setIsInventoriesLoadingError = createEvent<boolean>();\n","import React, { FC, useEffect } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport { Accordion } from \"@chakra-ui/react\";\n\nimport { LoadingSpinner } from \"../../../../ui\";\nimport { NodeType } from \"../../../../lib/tree\";\nimport { MenuItem, EmptyMenuItem } from \"./\";\n\nimport { $places, fetchPlacesFx } from \"../../model\";\n\nexport const Menu: FC = () => {\n  const { placesTree } = useStore($places);\n\n  let isPlacesLoading = useStore(fetchPlacesFx.pending);\n\n  useEffect(() => {\n    fetchPlacesFx();\n  }, []);\n\n  if (isPlacesLoading) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <Accordion defaultIndex={[0]} allowMultiple>\n      {placesTree && getMenuItems(placesTree)}\n    </Accordion>\n  );\n};\n\nfunction getMenuItems(node: NodeType): JSX.Element {\n  const item =\n    node.parts.length > 0 ? (\n      node.id === \"buildings\" ? (\n        <>{node.parts.map((part: NodeType) => getMenuItems(part))}</>\n      ) : (\n        <MenuItem key={node.id} placeId={node.id} title={node.name}>\n          {node.parts.map((part: NodeType) => getMenuItems(part))}\n        </MenuItem>\n      )\n    ) : (\n      <EmptyMenuItem key={node.id} id={node.id} name={node.name} />\n    );\n  return item;\n}\n","import { NodeType } from \"./tree\";\nimport { TreeNode } from \"../features/places/types\";\n\nexport function findChildrenIds(currentId: string, root: TreeNode): string[] {\n  const ids: string[] = [];\n\n  const targetNode = findBFS(currentId, root);\n\n  traverseBFS(targetNode, (node) => {\n    ids.push(node.id);\n  });\n\n  return ids;\n}\n\nexport function findBFS(id: string, root: NodeType): NodeType | null {\n  let _node = null;\n\n  traverseBFS(root, (node: NodeType): void => {\n    if (node.id === id) {\n      _node = node;\n    }\n  });\n\n  return _node;\n}\n\nexport function traverseBFS(\n  target: NodeType | null,\n  cb: (node: NodeType) => void\n): void {\n  if (target === null) return;\n\n  const queue = [target];\n\n  if (cb)\n    while (queue.length) {\n      const node = queue[0];\n      queue.shift();\n\n      cb(node);\n\n      for (const part of node.parts) {\n        queue.push(part);\n      }\n    }\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport {\n  AccordionButton,\n  AccordionItem,\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n} from \"@chakra-ui/react\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\n\nimport { Inventory } from \"../../types\";\n\nimport { findChildrenIds } from \"../../../../lib/placeTree-helpers\";\n\nimport { $places, setCurrentPlaceId, setIsCurrentPlaceLast } from \"../../model\";\n\ntype Props = {\n  placeId: string;\n  title: string | null;\n  children: string | JSX.Element | JSX.Element[];\n};\n\nexport const MenuItem: FC<Props> = ({ placeId, title, children }) => {\n  const [hasInventory, setHasInventory] = useState<boolean>(false);\n\n  const { currentPlaceId, inventories, placesTree } = useStore($places);\n  const [isSelected, setIsSelected] = useState<boolean>(\n    placeId === currentPlaceId\n  );\n\n  useEffect(() => {\n    const childrenIds = findChildrenIds(placeId, placesTree);\n\n    let hasInventory = false;\n    inventories.forEach((inventory: Inventory) => {\n      if (childrenIds.includes(inventory.placeId)) {\n        hasInventory = true;\n      }\n    });\n\n    setHasInventory(hasInventory);\n  }, [inventories, placeId, placesTree]);\n\n  useEffect(() => {\n    setIsSelected(currentPlaceId === placeId);\n  }, [currentPlaceId, placeId]);\n\n  const onClick = () => {\n    setCurrentPlaceId(placeId);\n    setIsCurrentPlaceLast(false);\n  };\n\n  return (\n    <AccordionItem placeid={placeId} pr=\"0\">\n      {title && (\n        <h2>\n          <AccordionButton\n            onClick={onClick}\n            bg={isSelected ? \"green.300\" : undefined}\n            transition=\"background .2s\"\n            _hover={{\n              cursor: \"pointer\",\n              bg: isSelected ? \"green.300\" : \"rgba(200, 200, 200, .5)\",\n              transition: \"background .2s\",\n            }}\n          >\n            <Box flex=\"1\" textAlign=\"left\" p=\"0\" pl=\"5px\">\n              {title} {hasInventory && <CheckIcon color=\"green.800\" />}\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n        </h2>\n      )}\n      <AccordionPanel pr=\"0\">{children}</AccordionPanel>\n    </AccordionItem>\n  );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport { CheckIcon } from \"@chakra-ui/icons\";\n\nimport { Box } from \"@chakra-ui/react\";\nimport { Inventory } from \"../../types\";\n\nimport { $places, setCurrentPlaceId, setIsCurrentPlaceLast } from \"../../model\";\n\ntype Props = {\n  id: string;\n  name: string;\n};\n\nexport const EmptyMenuItem: FC<Props> = ({ id, name }) => {\n  const [hasInventory, setHasInventory] = useState<boolean>(false);\n\n  const { currentPlaceId, inventories } = useStore($places);\n  const [isSelected, setIsSelected] = useState<boolean>(currentPlaceId === id);\n\n  useEffect(() => {\n    let hasInventory = false;\n    inventories.forEach((inventory: Inventory) => {\n      if (inventory.placeId === id) {\n        hasInventory = true;\n      }\n    });\n\n    setHasInventory(hasInventory);\n  }, [inventories, id]);\n\n  useEffect(() => {\n    setIsSelected(currentPlaceId === id);\n  }, [currentPlaceId, id]);\n\n  const onClick = () => {\n    setCurrentPlaceId(id);\n    setIsCurrentPlaceLast(true);\n  };\n\n  return (\n    <Box\n      bg={isSelected ? \"green.300\" : undefined}\n      onClick={onClick}\n      flex=\"1\"\n      mb=\"10px\"\n      ml=\"10px\"\n      textAlign=\"left\"\n      p=\"5px\"\n      pl=\"10px\"\n      transition=\"background .2s\"\n      _hover={{\n        cursor: \"pointer\",\n        bg: isSelected ? \"green.300\" : \"rgba(200, 200, 200, .5)\",\n        transition: \"background .2s\",\n      }}\n    >\n      {name} {hasInventory && <CheckIcon color=\"green.800\" />}\n    </Box>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport { ListItem, Box } from \"@chakra-ui/react\";\nimport { ListButton } from \"../../../../ui\";\n\nimport { $places } from \"../../model\";\n\ntype Props = {\n  id: string;\n  name: string;\n  count: number;\n  onEditModalOpen: (id: string, name: string, count: number) => void;\n  onDeleteModalOpen: (id: string, name: string) => void;\n};\n\nexport const InventoryListItem: FC<Props> = ({\n  id,\n  name,\n  count,\n  onEditModalOpen,\n  onDeleteModalOpen,\n}) => {\n  const { isCurrentPlaceLast } = useStore($places);\n\n  return (\n    <ListItem\n      bg=\"blue.200\"\n      p={2}\n      display=\"flex\"\n      minW=\"400px\"\n      maxW=\"1024px\"\n      justifyContent=\"space-between\"\n      mb=\"10px\"\n      flexWrap=\"wrap\"\n    >\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        minW=\"400px\"\n        flexWrap=\"wrap\"\n        pr=\"10px\"\n      >\n        <span>\n          Наименование: <span style={{ fontWeight: \"bold\" }}> {name}</span>{\" \"}\n        </span>\n        <span>\n          Количество: <span style={{ fontWeight: \"bold\" }}> {count}</span>\n        </span>\n      </Box>\n      {isCurrentPlaceLast ? (\n        <Box display=\"flex\" flexWrap=\"nowrap\">\n          <ListButton onClick={() => onEditModalOpen(id, name, count)}>\n            Редактировать\n          </ListButton>\n          <ListButton onClick={() => onDeleteModalOpen(id, name)}>\n            Удалить\n          </ListButton>\n        </Box>\n      ) : null}\n    </ListItem>\n  );\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport { List } from \"@chakra-ui/react\";\n\nimport { InventoryListItem } from \"../atoms\";\nimport { LoadingSpinner } from \"../../../../ui\";\nimport { Inventory } from \"../../types\";\nimport { findChildrenIds } from \"../../../../lib/placeTree-helpers\";\n\nimport { $places, fetchInventoriesFx } from \"../../model\";\n\ntype Props = {\n  onEditModalOpen: (id: string, name: string, count: number) => void;\n  onDeleteModalOpen: (id: string, name: string) => void;\n};\n\nexport const InventoryList: FC<Props> = ({\n  onEditModalOpen,\n  onDeleteModalOpen,\n}) => {\n  const [currentPlaceChildrenIds, setCurrentPlaceChildrenIds] = useState<\n    string[]\n  >([]);\n\n  const { inventories, currentPlaceId, placesTree } = useStore($places);\n\n  useEffect(() => {\n    fetchInventoriesFx();\n  }, []);\n\n  useEffect(() => {\n    const ids = findChildrenIds(currentPlaceId, placesTree);\n    setCurrentPlaceChildrenIds(ids);\n  }, [currentPlaceId, placesTree]);\n\n  const filteredInventories = inventories.filter((inventory: Inventory) => {\n    if (currentPlaceId === \"buildings\") return true;\n    return currentPlaceChildrenIds.includes(inventory.placeId);\n  });\n\n  const isInventoriesLoading = useStore(fetchInventoriesFx.pending);\n\n  if (isInventoriesLoading) return <LoadingSpinner />;\n\n  return (\n    <List>\n      {filteredInventories.map((inventory: Inventory) => (\n        <InventoryListItem\n          key={inventory.id}\n          id={inventory.id}\n          name={inventory.name}\n          count={inventory.count}\n          onEditModalOpen={onEditModalOpen}\n          onDeleteModalOpen={onDeleteModalOpen}\n        />\n      ))}\n    </List>\n  );\n};\n","import React, { FC, FormEvent, useState } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  useToast,\n} from \"@chakra-ui/react\";\n\nimport { ValidationAlert } from \"../../../../ui\";\n\nimport { addInventoryFx } from \"../../model\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  currentPlaceId: string;\n};\n\nexport const AddModal: FC<Props> = ({ isOpen, onClose, currentPlaceId }) => {\n  const toast = useToast();\n\n  const [name, setName] = useState<string>(\"\");\n  const [nameRequiredError, setNameRequiredError] = useState<boolean>(false);\n  const [count, setCount] = useState<number>(0);\n  const [countRequiredError, setCountRequiredError] = useState<boolean>(false);\n  const [negativeCountError, setNegativeCountError] = useState<boolean>(false);\n  const [tooBigCountError, setTooBigCountError] = useState<boolean>(false);\n\n  const onNameChange = (e: FormEvent<HTMLInputElement>) => {\n    setName(e.currentTarget.value);\n    setNameRequiredError(false);\n  };\n\n  const onCountChange = (e: FormEvent<HTMLInputElement>) => {\n    setCount(Number(e.currentTarget.value));\n    setCountRequiredError(false);\n    setNegativeCountError(false);\n    setTooBigCountError(false);\n  };\n\n  const onSave = () => {\n    if (name === \"\") {\n      setNameRequiredError(true);\n    }\n    if (count === 0) {\n      setCountRequiredError(true);\n    }\n    if (count < 0) {\n      setNegativeCountError(true);\n    }\n    if (count > 1000) {\n      setTooBigCountError(true);\n    }\n    if (name === \"\" || count === 0 || count < 0 || count > 1000) {\n      return;\n    }\n\n    addInventoryFx({ name, count, placeId: currentPlaceId });\n\n    const unwatchDone = addInventoryFx.done.watch(() => {\n      console.log(\"addInventoryFx.done\");\n      setCount(0);\n      setName(\"\");\n      onClose();\n      toast({\n        title: \"Добавление.\",\n        description: \"Оборудование успешно добавлено.\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n      unwatchDone();\n    });\n\n    const unwatchFail = addInventoryFx.fail.watch(() => {\n      onClose();\n      toast({\n        title: \"Добавление.\",\n        description: \"Не удалось добавить оборудование.\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n      unwatchFail();\n    });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Добавить оборудование</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel>Название</FormLabel>\n            <Input\n              placeholder=\"Название\"\n              onChange={onNameChange}\n              value={name}\n            />\n            {nameRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести название!\"\n                onClose={() => setNameRequiredError(false)}\n              />\n            )}\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel>Количество</FormLabel>\n            <Input\n              type=\"number\"\n              placeholder=\"Количество\"\n              onChange={onCountChange}\n              value={count.toString()}\n            />\n            {countRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести количество!\"\n                onClose={() => setCountRequiredError(false)}\n              />\n            )}\n            {negativeCountError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Не может быть отрицательным.\"\n                onClose={() => setNegativeCountError(false)}\n              />\n            )}\n            {tooBigCountError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Слишком много.\"\n                onClose={() => setTooBigCountError(false)}\n              />\n            )}\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            colorScheme=\"blue\"\n            mr={3}\n            onClick={onSave}\n            isLoading={useStore(addInventoryFx.pending)}\n            loadingText=\"Добавление\"\n          >\n            Добавить\n          </Button>\n          <Button onClick={onClose}>Отмена</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { FC, FormEvent, useState, useEffect } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  useToast,\n} from \"@chakra-ui/react\";\n\nimport { ValidationAlert } from \"../../../../ui\";\n\nimport { editInventoryFx } from \"../../model\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  editModalId: string;\n  editModalName: string;\n  editModalCount: number;\n};\n\nexport const EditModal: FC<Props> = ({\n  isOpen,\n  onClose,\n  editModalId,\n  editModalName,\n  editModalCount,\n}) => {\n  const toast = useToast();\n\n  const [name, setName] = useState<string>(editModalName);\n  const [nameRequiredError, setNameRequiredError] = useState<boolean>(false);\n  const [count, setCount] = useState<number>(editModalCount);\n  const [countRequiredError, setCountRequiredError] = useState<boolean>(false);\n  const [negativeCountError, setNegativeCountError] = useState<boolean>(false);\n  const [tooBigCountError, setTooBigCountError] = useState<boolean>(false);\n\n  useEffect(() => {\n    setName(editModalName);\n    setCount(editModalCount);\n  }, [editModalName, editModalCount]);\n\n  const onNameChange = (e: FormEvent<HTMLInputElement>) => {\n    setName(e.currentTarget.value);\n    setNameRequiredError(false);\n  };\n\n  const onCountChange = (e: FormEvent<HTMLInputElement>) => {\n    setCount(Number(e.currentTarget.value));\n    setCountRequiredError(false);\n    setNegativeCountError(false);\n    setTooBigCountError(false);\n  };\n\n  const onSave = () => {\n    if (name === \"\") {\n      setNameRequiredError(true);\n    }\n    if (count === 0) {\n      setCountRequiredError(true);\n    }\n    if (count < 0) {\n      setNegativeCountError(true);\n    }\n    if (count > 1000) {\n      setTooBigCountError(true);\n    }\n    if (name === \"\" || count === 0 || count < 0 || count > 1000) {\n      return;\n    }\n\n    const newInventory = {\n      name,\n      count,\n    };\n\n    editInventoryFx({ inventoryId: editModalId, newInventory: newInventory });\n\n    const unwatchDone = editInventoryFx.done.watch(() => {\n      onClose();\n      toast({\n        title: \"Редактирование.\",\n        description: \"Оборудование успешно отредактировано.\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n      unwatchDone();\n    });\n\n    const unwatchFail = editInventoryFx.fail.watch(() => {\n      onClose();\n      toast({\n        title: \"Редактирование.\",\n        description: \"Не удалось отредактировать оборудование.\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n      unwatchFail();\n    });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Изменить оборудование</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <FormControl>\n            <FormLabel>Название</FormLabel>\n            <Input\n              placeholder=\"Название\"\n              onChange={onNameChange}\n              value={name}\n            />\n            {nameRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести название!\"\n                onClose={() => setNameRequiredError(false)}\n              />\n            )}\n          </FormControl>\n\n          <FormControl mt={4}>\n            <FormLabel>Количество</FormLabel>\n            <Input\n              type=\"number\"\n              placeholder=\"Количество\"\n              onChange={onCountChange}\n              value={count.toString()}\n            />\n            {countRequiredError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Необходимо ввести количество!\"\n                onClose={() => setCountRequiredError(false)}\n              />\n            )}\n            {negativeCountError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Не может быть отрицательным.\"\n                onClose={() => setNegativeCountError(false)}\n              />\n            )}\n            {tooBigCountError && (\n              <ValidationAlert\n                title=\"Ошибка!\"\n                text=\"Слишком много.\"\n                onClose={() => setTooBigCountError(false)}\n              />\n            )}\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            colorScheme=\"blue\"\n            mr={3}\n            onClick={onSave}\n            isLoading={useStore(editInventoryFx.pending)}\n            loadingText=\"Изменение\"\n          >\n            Изменить\n          </Button>\n          <Button onClick={onClose}>Отмена</Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\n\nimport { deleteInventoryFx } from \"../../model\";\n\ntype Props = {\n  isOpen: boolean;\n  onClose: () => void;\n  deleteModalId: string;\n  deleteModalName: string;\n};\n\nexport const DeleteModal: FC<Props> = ({\n  isOpen,\n  onClose,\n  deleteModalId,\n  deleteModalName,\n}) => {\n  const toast = useToast();\n\n  const onDelete = () => {\n    deleteInventoryFx({ inventoryId: deleteModalId });\n\n    const unwatchDone = deleteInventoryFx.done.watch(() => {\n      onClose();\n      toast({\n        title: \"Удаление.\",\n        description: \"Оборудование успешно удалено.\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n      });\n      unwatchDone();\n    });\n\n    const unwatchFail = deleteInventoryFx.fail.watch(() => {\n      onClose();\n      toast({\n        title: \"Удаление.\",\n        description: \"Не удалось удалить оборудование.\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n      unwatchFail();\n    });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Удаление оборудования</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Text>Вы уверены, что хотите удалить {deleteModalName}?</Text>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n            Отмена\n          </Button>\n          <Button\n            colorScheme=\"red\"\n            onClick={onDelete}\n            isLoading={useStore(deleteInventoryFx.pending)}\n            loadingText=\"Удаление\"\n          >\n            Удалить\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { FC, useState } from \"react\";\nimport { useStore } from \"effector-react\";\n\nimport { Box, Heading, Flex, Button } from \"@chakra-ui/react\";\n\nimport { InventoryList, AddModal, EditModal, DeleteModal } from \"../\";\n\nimport { $places } from \"../../model\";\n\nexport const Inventories: FC = () => {\n  const { isCurrentPlaceLast, currentPlaceId } = useStore($places);\n\n  const [isAddModalOpen, setIsAddModalOpen] = useState<boolean>(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState<boolean>(false);\n  const [editModalId, setEditModalId] = useState<string>(\"\");\n  const [editModalName, setEditModalName] = useState<string>(\"\");\n  const [editModalCount, setEditModalCount] = useState<number>(0);\n\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState<boolean>(false);\n  const [deleteModalId, setDeleteModalId] = useState<string>(\"\");\n  const [deleteModalName, setDeleteModalName] = useState<string>(\"\");\n\n  const onEditModalOpen = (id: string, name: string, count: number) => {\n    setEditModalId(id);\n    setEditModalName(name);\n    setEditModalCount(count);\n    setIsEditModalOpen(true);\n  };\n\n  const onDeleteModalOpen = (id: string, name: string) => {\n    setDeleteModalId(id);\n    setDeleteModalName(name);\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <Box p={2}>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" flexWrap=\"wrap\">\n        <Heading size=\"md\" textAlign=\"center\">\n          Имеющееся оборудование\n        </Heading>\n        {isCurrentPlaceLast && (\n          <Button onClick={() => setIsAddModalOpen(true)} bg=\"green.300\">\n            Добавить оборудование\n          </Button>\n        )}\n      </Flex>\n      <Box pt={4}>\n        <InventoryList\n          onEditModalOpen={onEditModalOpen}\n          onDeleteModalOpen={onDeleteModalOpen}\n        />\n      </Box>\n\n      <AddModal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        currentPlaceId={currentPlaceId}\n      />\n      <EditModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        editModalId={editModalId}\n        editModalName={editModalName}\n        editModalCount={editModalCount}\n      />\n\n      <DeleteModal\n        isOpen={isDeleteModalOpen}\n        onClose={() => setIsDeleteModalOpen(false)}\n        deleteModalId={deleteModalId}\n        deleteModalName={deleteModalName}\n      />\n    </Box>\n  );\n};\n","export type NodeType = {\n  id: string;\n  name: string;\n  parts: NodeType[];\n};\n\ninterface INode {\n  id: string;\n  name: string;\n  parts: NodeType[];\n}\n\nexport interface ITree {\n  root: NodeType;\n  add: (id: string, name: string, toNodeId?: string) => void;\n  findBFS: (id: string) => NodeType | null;\n  traverseBFS: (cb: any) => void;\n}\n\nclass Node implements INode {\n  id: string;\n  name: string;\n  parts: [];\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n    this.parts = [];\n  }\n}\n\nexport class Tree implements ITree {\n  root: NodeType;\n\n  constructor() {\n    this.root = { id: \"buildings\", name: \"Все здания\", parts: [] };\n  }\n\n  add(id: string, name: string, toNodeId?: string): void {\n    const node = new Node(id, name);\n\n    const parent = toNodeId\n      ? this.findBFS(toNodeId)\n      : this.findBFS(\"buildings\");\n\n    if (parent) {\n      parent.parts.push(node);\n    }\n  }\n\n  findBFS(id: string): NodeType | null {\n    const queue = [this.root];\n    let _node = null;\n\n    this.traverseBFS((node: NodeType): void => {\n      if (node.id === id) {\n        _node = node;\n      }\n    });\n\n    return _node;\n  }\n\n  traverseBFS(cb: (node: NodeType) => void): void {\n    const queue = [this.root];\n\n    if (cb)\n      while (queue.length) {\n        const node = queue[0];\n        queue.shift();\n\n        cb(node);\n\n        for (const part of node.parts) {\n          queue.push(part);\n        }\n      }\n  }\n}\n","import { ITree } from \"./tree\";\n\nexport type PlaceType = {\n  id: string;\n  name: string;\n  parts: string[];\n};\n\nexport function addToTree(\n  tree: ITree,\n  docs: PlaceType[],\n  doc: PlaceType,\n  toNodeId?: string\n) {\n  if (tree.findBFS(doc.id)) {\n    return;\n  }\n  tree.add(doc.id, doc.name, toNodeId);\n\n  const currentId = doc.id;\n\n  if (doc.parts && doc.parts.length > 0) {\n    doc.parts.forEach((id: string) => {\n      const index = docs.findIndex((doc: PlaceType) => doc.id === id);\n      const currentDoc = docs[index];\n      addToTree(tree, docs, currentDoc, currentId);\n    });\n  }\n}\n","import { forward } from \"effector\";\nimport {\n  $places,\n  fetchPlacesFx,\n  fetchInventoriesFx,\n  addInventoryFx,\n  deleteInventoryFx,\n  editInventoryFx,\n  setIsCurrentPlaceLast,\n  setCurrentPlaceId,\n} from \"./\";\n\n// types\nimport { PlacesStore, Place, Inventory } from \"../types\";\n\nimport { Tree } from \"../../../lib/tree\";\nimport { addToTree } from \"../../../lib/addToTree\";\n\nconst updatePlacesTree = (state: PlacesStore, places: Place[]): PlacesStore => {\n  const tree = new Tree();\n\n  for (let i = 0; i < places.length; i++) {\n    addToTree(tree, places, places[i]);\n  }\n\n  return { ...state, placesTree: tree.root };\n};\n\nconst updateInventories = (\n  state: PlacesStore,\n  inventories: Inventory[]\n): PlacesStore => {\n  return { ...state, inventories: inventories };\n};\n\nconst setIsCurrentPlaceLastReducer = (state: PlacesStore, isLast: boolean) => {\n  return { ...state, isCurrentPlaceLast: isLast };\n};\n\nconst setCurrentPlaceIdReducer = (\n  state: PlacesStore,\n  currentPlaceId: string\n) => {\n  return { ...state, currentPlaceId: currentPlaceId };\n};\n\n$places.on(fetchPlacesFx.doneData, updatePlacesTree);\n\n$places.on(fetchInventoriesFx.doneData, updateInventories);\n\n$places.on(setIsCurrentPlaceLast, setIsCurrentPlaceLastReducer);\n\n$places.on(setCurrentPlaceId, setCurrentPlaceIdReducer);\n\nforward({\n  from: addInventoryFx.done,\n  to: fetchInventoriesFx,\n});\n\nforward({\n  from: deleteInventoryFx.done,\n  to: fetchInventoriesFx,\n});\n\nforward({\n  from: editInventoryFx.done,\n  to: fetchInventoriesFx,\n});\n","import React, { FC } from \"react\";\n\nimport { BasicTemplate } from \"../../ui\";\nimport { Menu, Inventories } from \"./components\";\n\nimport \"./model/init\";\n\nexport const Places: FC = () => {\n  return <BasicTemplate left={<Menu />} right={<Inventories />} />;\n};\n","import React from \"react\";\n\nimport { Places } from \"./features/places\";\n\nfunction App() {\n  return <Places />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}