{"version":3,"sources":["features/redux/actions/actionTypes.ts","lib/addToTree.ts","lib/tree.ts","firebase.ts","api/places.ts","lib/filterInventories.ts","api/inventories.ts","features/redux/actions/placeActions.ts","ui/templates/two-columns.tsx","ui/templates/basic-template.tsx","ui/atoms/header.tsx","ui/atoms/footer.tsx","ui/molecules/loading-spinner.tsx","features/places/components/molecules/menu.tsx","features/places/components/molecules/menu-item.tsx","features/places/components/molecules/empty-menu-item.tsx","features/places/components/atoms/inventory-list-item.tsx","lib/placeTree-helpers.ts","features/places/components/molecules/inventory-list.tsx","features/places/places.tsx","App.tsx","features/redux/reducers/placeReducer.ts","features/redux/reducers/index.ts","features/redux/store.ts","index.tsx"],"names":["SET_PLACES_TREE","SET_INVENTORIES","SET_PLACES_LOADING","SET_PLACES_LOADING_ERROR","SET_INVENTORIES_LOADING","SET_INVENTORIES_LOADING_ERROR","SET_CURRENT_PLACE_ID","addToTree","tree","docs","doc","toNodeId","findBFS","id","add","name","currentId","parts","length","forEach","index","findIndex","currentDoc","Node","this","Tree","root","node","parent","push","_node","traverseBFS","cb","queue","shift","part","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getPlaces","a","db","firestore","collection","get","data","places","map","filterInventories","inventories","filter","inventory","undefined","count","placeId","getInventories","place","setPlacesLoading","isLoading","type","payload","setPlacesLoadingError","isError","setInventoriesLoading","setInventoriesLoadingError","fetchPlaces","dispatch","then","i","setPlacesTree","catch","fetchInventories","setInventories","setCurrentPlaceId","TwoColumns","left","right","flex","minW","bg","BasicTemplate","minH","flexDirection","justifyContent","Header","h","Footer","LoadingSpinner","alignItems","Menu","useSelector","state","placeReducer","placesTree","isPlacesLoading","isPlacesLoadingError","currentPlaceId","defaultIndex","allowMultiple","getMenuItems","title","MenuItem","children","useDispatch","placeid","pr","onClick","textAlign","p","pl","EmptyMenuItem","m","InventoryListItem","findChildrenIds","ids","targetNode","target","InventoryList","useState","currentPlaceChildrenIds","setCurrentPlaceChildrenIds","isInventoriesLoading","useEffect","filteredInventories","includes","Places","App","initialState","isInventoriesLoadingError","rootReducer","combineReducers","action","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.938fdace.chunk.js","sourcesContent":["export const SET_PLACES_TREE = \"SET_PLACES_TREE\";\nexport const SET_INVENTORIES = \"SET_INVENTORIES\";\nexport const SET_PLACES_LOADING = \"SET_PLACES_LOADING\";\nexport const SET_PLACES_LOADING_ERROR = \"SET_PLACES_LOADING_ERROR\";\nexport const SET_INVENTORIES_LOADING = \"SET_INVENTORIES_LOADING\";\nexport const SET_INVENTORIES_LOADING_ERROR = \"SET_PLACES_LOADING_ERROR\";\nexport const SET_CURRENT_PLACE_ID = \"SET_CURRENT_PLACE_ID\";\n","import { ITree } from \"./tree\";\n\nexport type PlaceType = {\n  id: string;\n  name: string;\n  parts: string[];\n};\n\nexport function addToTree(\n  tree: ITree,\n  docs: PlaceType[],\n  doc: PlaceType,\n  toNodeId?: string\n) {\n  if (tree.findBFS(doc.id)) {\n    //console.log(\"tree.findBFS(doc.id)\", tree.findBFS(doc.id));\n    return;\n  }\n  tree.add(doc.id, doc.name, toNodeId);\n\n  const currentId = doc.id;\n\n  if (doc.parts && doc.parts.length > 0) {\n    //console.log(\"doc.parts: \", doc.parts);\n    doc.parts.forEach((id: string) => {\n      const index = docs.findIndex((doc: PlaceType) => doc.id === id);\n      const currentDoc = docs[index];\n      //console.log(\"currentDoc: \", currentDoc);\n      //console.log(\"id:\", id);\n      //console.log(\"currentId: \", currentId);\n      addToTree(tree, docs, currentDoc, currentId);\n    });\n  }\n}\n","export type NodeType = {\n  id: string;\n  name: string;\n  parts: NodeType[];\n};\n\ninterface INode {\n  id: string;\n  name: string;\n  parts: NodeType[];\n}\n\nexport interface ITree {\n  root: NodeType;\n  add: (id: string, name: string, toNodeId?: string) => void;\n  findBFS: (id: string) => NodeType | null;\n  traverseBFS: (cb: any) => void;\n}\n\nclass Node implements INode {\n  id: string;\n  name: string;\n  parts: [];\n\n  constructor(id: string, name: string) {\n    this.id = id;\n    this.name = name;\n    this.parts = [];\n  }\n}\n\nexport class Tree implements ITree {\n  root: NodeType;\n\n  constructor() {\n    this.root = { id: \"buildings\", name: \"Все здания\", parts: [] };\n  }\n\n  add(id: string, name: string, toNodeId?: string): void {\n    const node = new Node(id, name);\n\n    const parent = toNodeId\n      ? this.findBFS(toNodeId)\n      : this.findBFS(\"buildings\");\n\n    if (parent) {\n      parent.parts.push(node);\n    }\n  }\n\n  findBFS(id: string): NodeType | null {\n    const queue = [this.root];\n    let _node = null;\n\n    this.traverseBFS((node: NodeType): void => {\n      if (node.id === id) {\n        _node = node;\n      }\n    });\n\n    return _node;\n  }\n\n  traverseBFS(cb: (node: NodeType) => void): void {\n    const queue = [this.root];\n\n    if (cb)\n      while (queue.length) {\n        const node = queue[0];\n        queue.shift();\n\n        cb(node);\n\n        for (const part of node.parts) {\n          queue.push(part);\n        }\n      }\n  }\n}\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\n  authDomain: \"dv-inventory.firebaseapp.com\",\n  databaseURL: \"https://dv-inventory.firebaseio.com\",\n  projectId: \"dv-inventory\",\n  storageBucket: \"dv-inventory.appspot.com\",\n  messagingSenderId: \"130062240176\",\n  appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport { firebase };\n","import { firebase } from \"../firebase\";\n\nexport const getPlaces = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"places\").get();\n\n  const places = data.docs.map((doc) => ({\n    id: doc.id,\n    name: doc.data().name,\n    parts: doc.data().parts && doc.data().parts.map((part: any) => part.id),\n  }));\n  return places;\n};\n","import { InventoryType } from \"../features/redux/actions/placeActions\";\n\nexport function filterInventories(inventories: InventoryType[]) {\n  const filteredInventories = inventories.filter((inventory: InventoryType) => {\n    if (\n      inventory.id === undefined ||\n      inventory.name === undefined ||\n      inventory.count === undefined ||\n      inventory.placeId === undefined\n    ) {\n      return false;\n    }\n    return true;\n  });\n\n  return filteredInventories;\n}\n","import { firebase } from \"../firebase\";\nimport { filterInventories } from \"../lib/filterInventories\";\n\nexport const getInventories = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"inventory\").get();\n\n  const inventories = data.docs.map((doc) => ({\n    id: doc.id && doc.id,\n    name: doc.data && doc.data().name,\n    count: doc.data && doc.data().count,\n    placeId: doc.data && doc.data().place && doc.data().place.id,\n  }));\n\n  return filterInventories(inventories);\n};\n\n/*\nexport const getInventories2 = async () => {\n  const db = firebase.firestore();\n  const data = await db.collection(\"inventory\").get();\n\n  const inventories = data.docs.map((doc) => ({\n    id: doc.id && doc.id,\n    data: doc.data && doc.data(),\n    name: doc.data && doc.data().name,\n    count: doc.data && doc.data().count,\n    placeId: doc.data && doc.data().place && doc.data().place.id,\n  }));\n\n  return inventories;\n};\n*/\n","import {\n  SET_PLACES_TREE,\n  SET_INVENTORIES,\n  SET_PLACES_LOADING,\n  SET_PLACES_LOADING_ERROR,\n  SET_INVENTORIES_LOADING,\n  SET_INVENTORIES_LOADING_ERROR,\n  SET_CURRENT_PLACE_ID,\n} from \"./actionTypes\";\nimport { PlaceType, addToTree } from \"../../../lib/addToTree\";\nimport { NodeType, Tree } from \"../../../lib/tree\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { RootStateType } from \"../reducers\";\nimport { Dispatch } from \"redux\";\nimport { getPlaces } from \"../../../api/places\";\nimport { getInventories } from \"../../../api/inventories\";\n\n// todo: need to refactoring\n\ntype PlacesTreeType = {\n  type: typeof SET_PLACES_TREE;\n  payload: NodeType;\n};\n\ntype PlacesLoadingType = {\n  type: typeof SET_PLACES_LOADING;\n  payload: boolean;\n};\n\ntype PlacesLoadingErrorType = {\n  type: typeof SET_PLACES_LOADING_ERROR;\n  payload: boolean;\n};\n\nexport type InventoryType = {\n  id: string;\n  name: string;\n  count: number;\n  placeId: string;\n};\n\ntype SetInventoriesType = {\n  type: typeof SET_INVENTORIES;\n  payload: InventoryType[];\n};\n\ntype InventoriesLoadingType = {\n  type: typeof SET_INVENTORIES_LOADING;\n  payload: boolean;\n};\n\ntype InventoriesLoadingErrorType = {\n  type: typeof SET_INVENTORIES_LOADING_ERROR;\n  payload: boolean;\n};\n\ntype InventoriesType =\n  | SetInventoriesType\n  | InventoriesLoadingType\n  | InventoriesLoadingErrorType;\n\ntype PlacesType = PlacesTreeType | PlacesLoadingType | PlacesLoadingErrorType;\n\nexport const setPlacesTree = (places: PlaceType[]): PlacesTreeType => {\n  const tree = new Tree();\n\n  for (let i = 0; i < places.length; i++) {\n    addToTree(tree, places, places[i]);\n  }\n\n  return {\n    type: SET_PLACES_TREE,\n    payload: tree.root,\n  };\n};\n\nexport const setPlacesLoading = (isLoading: boolean): PlacesLoadingType => ({\n  type: SET_PLACES_LOADING,\n  payload: isLoading,\n});\n\nexport const setPlacesLoadingError = (\n  isError: boolean\n): PlacesLoadingErrorType => ({\n  type: SET_PLACES_LOADING_ERROR,\n  payload: isError,\n});\n\nexport const setInventories = (\n  inventories: InventoryType[]\n): SetInventoriesType => ({\n  type: SET_INVENTORIES,\n  payload: inventories,\n});\n\nexport const setInventoriesLoading = (\n  isLoading: boolean\n): InventoriesLoadingType => ({\n  type: SET_INVENTORIES_LOADING,\n  payload: isLoading,\n});\n\nexport const setInventoriesLoadingError = (\n  isError: boolean\n): InventoriesLoadingErrorType => ({\n  type: SET_PLACES_LOADING_ERROR,\n  payload: isError,\n});\n\nexport const fetchPlaces = (): ThunkAction<\n  void,\n  RootStateType,\n  unknown,\n  PlacesType\n> => (dispatch: Dispatch<PlacesType>) => {\n  dispatch(setPlacesLoading(true));\n  dispatch(setPlacesLoadingError(false));\n  getPlaces()\n    .then((places) => {\n      dispatch(setPlacesTree(places));\n      dispatch(setPlacesLoading(false));\n    })\n    .catch(() => dispatch(setPlacesLoadingError(true)));\n};\n\nexport const fetchInventories = (): ThunkAction<\n  void,\n  RootStateType,\n  unknown,\n  InventoriesType\n> => (dispatch: Dispatch<InventoriesType>) => {\n  dispatch(setInventoriesLoading(true));\n  dispatch(setInventoriesLoadingError(false));\n  getInventories()\n    .then((inventories) => {\n      dispatch(setInventories(inventories));\n      dispatch(setInventoriesLoading(false));\n    })\n    .catch(() => dispatch(setInventoriesLoadingError(true)));\n};\n\ntype CurrentPlaceIdType = {\n  type: typeof SET_CURRENT_PLACE_ID;\n  payload: string;\n};\n\nexport const setCurrentPlaceId = (id: string): CurrentPlaceIdType => ({\n  type: SET_CURRENT_PLACE_ID,\n  payload: id,\n});\n","import { ComponentType, FC } from \"react\";\n\nimport { Flex, Box } from \"@chakra-ui/react\";\n\ntype Props = {\n  left: ComponentType | JSX.Element;\n  right: ComponentType | JSX.Element;\n};\n\nexport const TwoColumns: FC<Props> = ({ left, right }) => {\n  return (\n    <Flex flex=\"auto\">\n      <Box flex=\"30%\" minW=\"300px\" bg=\"green.50\">\n        {left}\n      </Box>\n      <Box flex=\"70%\" bg=\"blue.50\">\n        {right}\n      </Box>\n    </Flex>\n  );\n};\n","import React, { ComponentType, FC } from \"react\";\n\nimport { Flex } from \"@chakra-ui/react\";\n\nimport { TwoColumns, Header, Footer } from \"../\";\n\ntype Props = {\n  left: ComponentType | JSX.Element;\n  right: ComponentType | JSX.Element;\n};\n\nexport const BasicTemplate: FC<Props> = ({ left, right }) => {\n  return (\n    <Flex minH=\"100vh\" flexDirection=\"column\" justifyContent=\"space-between\">\n      <Header />\n      <TwoColumns left={left} right={right} />\n      <Footer />\n    </Flex>\n  );\n};\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\nexport const Header: FC = () => (\n  <Box h=\"50px\" bg=\"gray.200\">\n    Header\n  </Box>\n);\n","import React, { FC } from \"react\";\n\nimport { Box } from \"@chakra-ui/react\";\n\nexport const Footer: FC = () => (\n  <Box h=\"50px\" bg=\"gray.200\">\n    Footer\n  </Box>\n);\n","import React, { FC } from \"react\";\n\nimport { Flex, Spinner } from \"@chakra-ui/react\";\n\nexport const LoadingSpinner: FC = () => (\n  <Flex h=\"200px\" alignItems=\"center\" justifyContent=\"center\">\n    <Spinner />\n  </Flex>\n);\n","import React, { FC, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Accordion } from \"@chakra-ui/react\";\n\nimport { RootStateType } from \"../../../redux/reducers\";\n\nimport { LoadingSpinner } from \"../../../../ui\";\nimport { NodeType } from \"../../../../lib/tree\";\nimport { MenuItem, EmptyMenuItem } from \"./\";\n\nexport const Menu: FC = () => {\n  const {\n    placesTree,\n    isPlacesLoading,\n    isPlacesLoadingError,\n    currentPlaceId,\n  } = useSelector((state: RootStateType) => state.placeReducer);\n\n  if (isPlacesLoading) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <Accordion defaultIndex={[0]} allowMultiple>\n      {placesTree && getMenuItems(placesTree)}\n    </Accordion>\n  );\n};\n\nfunction getMenuItems(node: NodeType): JSX.Element {\n  const item =\n    node.parts.length > 0 ? (\n      <MenuItem key={node.id} placeId={node.id} title={node.name}>\n        {node.parts.map((part: NodeType) => getMenuItems(part))}\n      </MenuItem>\n    ) : (\n      <EmptyMenuItem key={node.id} id={node.id} name={node.name} />\n    );\n  return item;\n}\n","import React, { FC, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { setCurrentPlaceId } from \"../../../redux/actions\";\n\nimport {\n  AccordionButton,\n  AccordionItem,\n  AccordionPanel,\n  AccordionIcon,\n  Box,\n} from \"@chakra-ui/react\";\n\ntype Props = {\n  placeId: string;\n  title: string | null;\n  children: string | JSX.Element | JSX.Element[];\n};\n\nexport const MenuItem: FC<Props> = ({ placeId, title, children }) => {\n  const dispatch = useDispatch();\n\n  const onClick = () => {\n    dispatch(setCurrentPlaceId(placeId));\n  };\n\n  return (\n    <AccordionItem placeid={placeId} pr=\"0\">\n      {title && (\n        <h2>\n          <AccordionButton onClick={onClick}>\n            <Box flex=\"1\" textAlign=\"left\" p=\"0\" pl=\"5px\">\n              {title}\n            </Box>\n            <AccordionIcon />\n          </AccordionButton>\n        </h2>\n      )}\n      <AccordionPanel pr=\"0\">{children}</AccordionPanel>\n    </AccordionItem>\n  );\n};\n","import React, { FC } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { setCurrentPlaceId } from \"../../../redux/actions\";\n\nimport { Box } from \"@chakra-ui/react\";\n\ntype Props = {\n  id: string;\n  name: string;\n};\n\nexport const EmptyMenuItem: FC<Props> = ({ id, name }) => {\n  const dispatch = useDispatch();\n\n  const onClick = () => {\n    dispatch(setCurrentPlaceId(id));\n  };\n\n  return (\n    <Box onClick={onClick} flex=\"1\" m=\"10px\" textAlign=\"left\" p=\"0\" pl=\"5px\">\n      {name}\n    </Box>\n  );\n};\n","import React, { FC } from \"react\";\n\nimport { ListItem, Button } from \"@chakra-ui/react\";\n\ntype Props = {\n  name: string;\n  count: number;\n};\n\nexport const InventoryListItem: FC<Props> = ({ name, count }) => {\n  return (\n    <ListItem>\n      Наименование: {name}, Количество: {count},<Button>Редактировать</Button>\n      <Button>Удалить</Button>\n    </ListItem>\n  );\n};\n","import { NodeType } from \"./tree\";\n\nexport function findChildrenIds(currentId: string, root: NodeType): string[] {\n  const isParent = false;\n  const ids: string[] = [];\n\n  const targetNode = findBFS(currentId, root);\n\n  traverseBFS(targetNode || root, (node) => {\n    ids.push(node.id);\n  });\n\n  return ids;\n}\n\nexport function findBFS(id: string, root: NodeType): NodeType | null {\n  let _node = null;\n\n  traverseBFS(root, (node: NodeType): void => {\n    if (node.id === id) {\n      _node = node;\n    }\n  });\n\n  return _node;\n}\n\nexport function traverseBFS(\n  target: NodeType | null,\n  cb: (node: NodeType) => void\n): void {\n  if (target === null) return;\n\n  const queue = [target];\n\n  if (cb)\n    while (queue.length) {\n      const node = queue[0];\n      queue.shift();\n\n      cb(node);\n\n      for (const part of node.parts) {\n        queue.push(part);\n      }\n    }\n}\n","import React, { FC, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { UnorderedList } from \"@chakra-ui/react\";\n\nimport { InventoryListItem } from \"../atoms\";\nimport { LoadingSpinner } from \"../../../../ui\";\nimport { RootStateType } from \"../../../redux/reducers\";\nimport { InventoryType } from \"../../../redux/actions/placeActions\";\nimport { NodeType } from \"../../../../lib/tree\";\nimport { findChildrenIds } from \"../../../../lib/placeTree-helpers\";\n\nexport const InventoryList: FC = () => {\n  const [currentPlaceChildrenIds, setCurrentPlaceChildrenIds] = useState<\n    string[]\n  >([]);\n\n  const {\n    inventories,\n    currentPlaceId,\n    placesTree,\n    isInventoriesLoading,\n  } = useSelector((state: RootStateType) => state.placeReducer);\n\n  useEffect(() => {\n    const ids = findChildrenIds(currentPlaceId, placesTree);\n    setCurrentPlaceChildrenIds(ids);\n  }, [currentPlaceId]);\n\n  const filteredInventories = inventories.filter((inventory: InventoryType) => {\n    if (currentPlaceId === \"buildings\") return true;\n    return currentPlaceChildrenIds.includes(inventory.placeId);\n  });\n\n  if (isInventoriesLoading) return <LoadingSpinner />;\n\n  return (\n    <UnorderedList>\n      {filteredInventories.map((inventory: InventoryType) => (\n        <InventoryListItem\n          key={inventory.id}\n          name={inventory.name}\n          count={inventory.count}\n        />\n      ))}\n    </UnorderedList>\n  );\n};\n","import React, { FC, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { fetchPlaces, fetchInventories } from \"../redux/actions\";\n\nimport { BasicTemplate } from \"../../ui\";\nimport { Menu, InventoryList } from \"./components\";\n\nexport const Places: FC = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPlaces());\n    dispatch(fetchInventories());\n  }, []);\n\n  return <BasicTemplate left={<Menu />} right={<InventoryList />} />;\n};\n","import React from \"react\";\n\nimport { Places } from \"./features/places\";\n\nfunction App() {\n  return <Places />;\n}\n\nexport default App;\n","import { NodeType } from \"../../../lib/tree\";\nimport {\n  SET_PLACES_TREE,\n  SET_INVENTORIES,\n  SET_PLACES_LOADING,\n  SET_PLACES_LOADING_ERROR,\n  SET_INVENTORIES_LOADING,\n  SET_INVENTORIES_LOADING_ERROR,\n  SET_CURRENT_PLACE_ID,\n} from \"../actions/actionTypes\";\nimport { InventoryType } from \"../actions/placeActions\";\n\ntype PlaceReducerType = {\n  currentPlaceId: string;\n  placesTree: NodeType | null;\n  isPlacesLoading: boolean;\n  isPlacesLoadingError: boolean;\n  inventories: InventoryType[];\n  isInventoriesLoading: boolean;\n  isInventoriesLoadingError: boolean;\n};\n\nconst initialState: PlaceReducerType = {\n  currentPlaceId: \"buildings\",\n  placesTree: null,\n  isPlacesLoading: false,\n  isPlacesLoadingError: false,\n  inventories: [],\n  isInventoriesLoading: false,\n  isInventoriesLoadingError: false,\n};\n\nexport const placeReducer = (\n  state = initialState,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case SET_PLACES_TREE:\n      return { ...state, placesTree: action.payload };\n    case SET_PLACES_LOADING:\n      return { ...state, isPlacesLoading: action.payload };\n    case SET_PLACES_LOADING_ERROR:\n      return { ...state, isPlacesLoadingError: action.payload };\n    case SET_INVENTORIES:\n      return { ...state, inventories: action.payload };\n    case SET_INVENTORIES_LOADING:\n      return { ...state, isInventoriesLoading: action.payload };\n    case SET_INVENTORIES_LOADING_ERROR:\n      return { ...state, isInventoriesLoadingError: action.payload };\n    case SET_CURRENT_PLACE_ID:\n      return { ...state, currentPlaceId: action.payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport { placeReducer } from \"./placeReducer\";\n\nexport const rootReducer = combineReducers({\n  placeReducer,\n});\n\nexport type RootStateType = ReturnType<typeof rootReducer>;\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(rootReducer, compose(applyMiddleware(thunk)));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\n\nimport { store } from \"./features/redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}